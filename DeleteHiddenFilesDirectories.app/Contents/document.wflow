<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>492</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on replace_chars(this_text, search_string, replacement_string)	set AppleScript's text item delimiters to the search_string	set the item_list to every text item of this_text	set AppleScript's text item delimiters to the replacement_string	set this_text to the item_list as string	set AppleScript's text item delimiters to ""	return this_textend replace_charson process_usb_device(i, USB)	set serial_num to ""	set current_item to item i of USB	repeat until current_item = ""		set i to i + 1		set current_item to item i of USB		if current_item contains "Mount point:" then			set serial_num to text ((offset of ": " in current_item) + 2) through -1 of current_item		end if	end repeat	return serial_numend process_usb_device--Removable Media: Yes olan USB sürücüler listesi oluşturuluyorset USB_Drives to {}set USB to paragraphs of (do shell script "system_profiler SPUSBDataType -detailLevel basic")repeat with i from 1 to (count of USB)	if item i of USB contains "Removable Media: Yes" then		set xxx to process_usb_device(i, USB)		if xxx is not equal to ("") then			set xxx to replace_chars(xxx, "/Volumes/", "")			set USB_Drives to USB_Drives &amp; xxx		end if	end ifend repeatset USB_Number to (count of USB_Drives)if USB_Number = 0 then	display dialog ("Please check USB drive. No USB drive was found. 

Bilgisayarınıza bağlı bir USB sürücüsü bulunamamıştır.") with title ("Delete hidden files in USB drive") with icon stop buttons {"Done"} default button "Done"	returnend ifif USB_Number &gt; 1 then	set secim to (choose from list USB_Drives with title ("Select USB Driver") with prompt "Select the one USB driver from the list below.

Aşağıdaki listeden bir USB sürücüsü seçiniz." OK button name "Continue" cancel button name "Cancel" default items {xxx}) as text		if secim is equal to ("false") then		return	end ifelse	set secim to xxxend ifset islem to ""set kontrol to ""set usb_name to ""repeat while islem = ""	set islem to "bitti"		set sonuc to display dialog ("Selected USB drive: " &amp; secim &amp; "
	
Seçilen USB sürücüsü: " &amp; secim) with title ("Delete hidden files in USB drive") with icon caution buttons {"About...", "Cancel", "Continue"} default button "Continue"	set usb_name to secim	set buton_name to the button returned of sonuc		if buton_name = "About..." then		display dialog ("ULAŞ YURTSEVER 
	
	Websites: http://www.ulasyurtsever.com 
	Email: ulasyurtsever@gmail.com 
	LinkedIn: https://www.linkedin.com/in/ulasyurtsever/ 
	") with title ("About...") buttons {"Done"} default button "Done"		set islem to ""	else		--Mount unmount işlemleri için bilgiler alınıyor...		try			tell application "Finder"				if disk usb_name exists then					set kontrol to "var"				end if			end tell			if kontrol = "var" then				set usb_name2 to replace_chars(usb_name, " ", "\\ ")				set usblongname to do shell script "(diskutil list | grep " &amp; usb_name2 &amp; ")"				set usbname to text -7 through -1 of usblongname				set kontrol to ""			else				display dialog ("Please check USB drive named. No USB drive with this name was found. This application has case sensitivity. 

Lütfen USB sürücü adını kontrol ediniz. Bu isimde bir USB sürücüsü bulunamamıştır. Uygulama büyük/küçük harfe duyarlıdır.") with title ("Delete hidden files in USB drive") with icon stop buttons {"Done"} default button "Done"				set islem to ""			end if					on error errStr number errorNumber			if errorNumber = 2 then				display dialog ("Please enter the USB drive name.
			
Lütfen USB sürücü adını giriniz.") with title ("Delete hidden files in USB drive") with icon stop buttons {"Done"} default button "Done"							end if			if errorNumber = 1 then				display dialog ("Please check USB drive named. No USB drive with this name was found. This application has case sensitivity. 

Lütfen USB sürücü adını kontrol ediniz. Bu isimde bir USB sürücüsü bulunamamıştır. Uygulama büyük/küçük harfe duyarlıdır.") with title ("Delete hidden files in USB drive") with icon stop buttons {"Done"} default button "Done"			end if			set islem to ""		end try	end ifend repeat--Silineceklerin neler olacağını kullanıcının seçeceği ekran geliyor...set input to (choose from list {"1-All hidden files (.file_name*),", "2-All hidden directory (.directory_name*),", "3-Folder (.Spotlight*),", "4-Folder (.fseventsd*),", "5-Folder (.Trashes*),", "6-Folder (System Volume Information),"} with title "Time to choose" with prompt "Select the ones you want to delete from the list below (you can multiple selections).

Aşağıdaki listeden silmek istediklerinizi seçiniz (çoklu seçim yapabilirsiniz...)." default items {"1-All hidden files (.file_name*),", "3-Folder (.Spotlight*),", "4-Folder (.fseventsd*),", "5-Folder (.Trashes*),", "6-Folder (System Volume Information),"} OK button name "Continue" cancel button name "Cancel" with multiple selections allowed) as textif input is not equal to ("false") then	(*set sonuc2 to display dialog ("All the hidden files on the USB flash named '" &amp; usb_name &amp; "' will be deleted. Are you sure? 
	
.file_name* 
.directory_name* 
.Spotlight* 
.fseventsd* 
.Trashes* 
System Volume Information") with title ("Delete hidden files in USB drive") with icon stop buttons {"Yes", "No"} default button "No"
	set buton_name2 to the button returned of sonuc2 *)			set yol to "/Volumes/" &amp; usb_name2 &amp; "/."		tell application "Finder"		if disk usb_name exists then			set input to text 1 thru -2 of input --son karakter olan (,) siliniyor.			set AppleScript's text item delimiters to {","}			set delimitedList to every text item of input			repeat with itemlist in delimitedList				if itemlist is not equal to null then					set islem_no to text 1 through 1 of itemlist				else					set islem_no to "0"				end if				if islem_no is equal to ("1") then					try						do shell script "find " &amp; yol &amp; " -type f -name '.*' -delete"					end try				end if				if islem_no is equal to ("2") then					try						do shell script "find " &amp; yol &amp; " -type d -name '.*' -exec rm -R {} ';'"					end try				end if				if islem_no is equal to ("3") then					try						do shell script "find " &amp; yol &amp; " -name '.Spotlight*' -exec rm -R {} ';'"					end try				end if				if islem_no is equal to ("4") then					try						do shell script "find " &amp; yol &amp; " -name '.fseventsd*' -exec rm -R {} ';'"					end try				end if				if islem_no is equal to ("5") then					try						do shell script "find " &amp; yol &amp; " -name '.Trashes*' -exec rm -R {} ';'"					end try				end if				if islem_no is equal to ("6") then					try						do shell script "find " &amp; yol &amp; " -name 'System Volume Information' -exec rm -R {} ';'"					end try				end if			end repeat			set sonuc to display dialog ("Hidden files deleted. Unmount the USB drive?") with title ("Delete hidden files in USB drive") with icon stop buttons {"Yes", "No"} default button "Yes"			set button_name to button returned of sonuc			if button_name = "Yes" then				do shell script "diskutil unmount /dev/" &amp; usbname				display dialog ("USB drive unmounted") with title ("Delete hidden files in USB drive") with icon note buttons {"Done"} default button "Done"			end if		else			display dialog ("No USB drive named '" &amp; usb_name &amp; "'") with title ("Delete hidden files in USB drive") with icon stop buttons {"Done"} default button "Done"		end if	end tellend if</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>937C6830-60D9-4089-8180-4B48B840449C</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>B5C57E3D-4AC1-425F-BC0E-F6778B7D94D2</string>
				<key>UUID</key>
				<string>6B4BB621-79C5-4ADF-80EE-0CDC83EADC38</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>conversionLabel</key>
				<integer>0</integer>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>441.500000:647.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
